import {TDateString, isDateString, TMonth, TDay} from "@potw/type-utils";
import {format as formatFn} from "date-fns";



export function stringAsDateString (dateStr?: string | null): TDateString | null {
    if (!dateStr) {
        return null;
    }
    if (!isDateString(dateStr)) {
        throw new Error("Invalid date string passed to toDateString: " + dateStr);
    }
    return dateStr;
}

export function getDateString (date?: string | number | Date): TDateString {
    let startDate: Date;
    try {
        startDate = date ? new Date(date) : new Date();
    } catch (e) {
        throw new Error("Invalid date passed to getDateString");
    }
    const year = startDate.getFullYear();
    let month: number | string = startDate.getMonth() + 1;
    let day: number | string = startDate.getDate();
    if (month < 10) {
        month = `0${month}` as TMonth;
    }
    if (day < 10) {
        day = `0${day}` as TDay;
    }
    const dateString = `${year}-${month}-${day}`;
    if (!isDateString(dateString)) {
        throw new Error(
            "Invalid date string generated by getDateString: " + dateString
        );
    }
    return dateString;
}

export function addTo (
    quantity: number,
    unit: "day" | "month" | "year",
    date: TDateString
): TDateString {
    const [year, month, day] = date.split("-").map(Number);
    const newDate = new Date(year, month - 1, day);
    switch (unit) {
        case "day":
            newDate.setDate(newDate.getDate() + quantity);
            break;
        case "month":
            newDate.setMonth(newDate.getMonth() + quantity);
            break;
        case "year":
            newDate.setFullYear(newDate.getFullYear() + quantity);
            break;
    }
    return getDateString(newDate);
}

export function subtractFrom (
    quantity: number,
    unit: "day" | "month" | "year",
    date: TDateString
): TDateString {
    return addTo(-quantity, unit, date);
}

export function getDifferenceInDays (
    startDate: TDateString,
    endDate: TDateString,
    unit: "day" | "month" | "year"
): number {
    const [startYear, startMonth, startDay] = startDate.split("-").map(Number);
    const [endYear, endMonth, endDay] = endDate.split("-").map(Number);
    const start = new Date(startYear, startMonth - 1, startDay);
    const end = new Date(endYear, endMonth - 1, endDay);
    const timeDifference = end.getTime() - start.getTime();
    const daysDifference = timeDifference / (1000 * 3600 * 24);
    switch (unit) {
        case "day":
            return daysDifference;
        case "month":
            return (
                (end.getFullYear() - start.getFullYear()) * 12 +
                end.getMonth() -
                start.getMonth()
            );
        case "year":
            return end.getFullYear() - start.getFullYear();
    }
}

const formats = {
    "monthDay": "MMMM do",
    "timeMonthDay": "eeee MMMM do @ h:mmbbbb",
    "timeShortMonthDay": "MM/dd @ h:mmbbbb",
    "short": "MMM d, ''yy",
    "long": "MMMM dd, yyyy"
};

export function formatDateTime (
    input: Date | string,
    format: keyof typeof formats = "long"
): string {
    let date: Date;
    try {
        if (typeof input === "string") {
            date = new Date(input);
        } else {
            date = input;
        }
    } catch (e) {
        return "Invalid date";
    }
    if (isNaN(date.getTime())) {
        return "Invalid date";
    }
    return formatFn(date, formats[format]);
}
